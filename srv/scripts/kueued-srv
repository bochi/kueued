#! /bin/sh
# Copyright (c) 2012 Stefan Bogner <sbogner@suse.com>
#
# /etc/init.d/kueued
#   and its symbolic link
# /usr/sbin/rckueued
#
### BEGIN INIT INFO
# Provides:          kueued-srv
# Required-Start:    $network mysql
# Should-Start:      $syslog 
# Required-Stop:     $syslog
# Should-Stop:       
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description:  kueued-srv
# Description:        Daemon to create QMON XML data (Server Part)
### END INIT INFO


KUEUED_BIN=/usr/bin/kueued-srv
test -x $KUEUED_BIN || exit 5

. /etc/rc.status
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting kueued server"
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
    UID_ENT="$(/usr/bin/getent passwd kueued)"

    if test -z "$UID_ENT"
    then
            echo
            echo "User kueued does not exist."
            echo "Please check /etc/kueued/kueued.conf before starting this service."
            rc_failed
    else
    	    startproc -u "kueued" -l "/var/log/kueued/kueued-srv.log" -e $KUEUED_BIN 
    fi
    # Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down kueued server"
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.

	killproc -TERM "kueued-srv"

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart)
	## Do a restart only if the service was active before.
	## Note: try-restart is not (yet) part of LSB (as of 1.2)
	$0 status >/dev/null &&  $0 restart

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)

	echo -n "Reload service kueued server"
	$0 stop  &&  $0 start
	#rc_status
	;;
    status)
	echo -n "Checking for service kueued server"
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
	# NOTE: checkproc returns LSB compliant status values.
	checkproc $KUEUED_BIN
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload}"
	exit 1
	;;
esac
rc_exit
